#!/usr/bin/env python3
"""
Scripts auxiliares para gerenciar m√∫ltiplas inst√¢ncias.

distribute_files.py - Distribui arquivos entre inst√¢ncias
collect_results.py - Coleta resultados de todas as inst√¢ncias
monitor_all.py - Monitora todas as inst√¢ncias em tempo real
"""

import os
import json
import shutil
from pathlib import Path
from typing import List
import argparse

PROJECT_ROOT = Path(__file__).parent
INSTANCES_FILE = PROJECT_ROOT / ".instances.json"

def load_instances():
    """Carrega informa√ß√µes das inst√¢ncias ativas."""
    if INSTANCES_FILE.exists():
        with open(INSTANCES_FILE, 'r') as f:
            return json.load(f)
    return {}

# ============================================================================
# 1. DISTRIBUIR ARQUIVOS ENTRE INST√ÇNCIAS
# ============================================================================

def distribute_files(source_dir: Path, instances: dict, strategy: str = "round-robin"):
    """
    Distribui arquivos HTML entre inst√¢ncias.
    
    Args:
        source_dir: Diret√≥rio com arquivos HTML
        instances: Dicion√°rio de inst√¢ncias ativas
        strategy: 'round-robin' ou 'balanced'
    """
    html_files = list(source_dir.glob("*.html"))
    
    if not html_files:
        print("‚ùå Nenhum arquivo HTML encontrado em:", source_dir)
        return
    
    if not instances:
        print("‚ùå Nenhuma inst√¢ncia ativa. Execute: python orchestrator.py start")
        return
    
    print(f"\nüì¶ Distribuindo {len(html_files)} arquivo(s) entre {len(instances)} inst√¢ncia(s)")
    print(f"   Estrat√©gia: {strategy}")
    print("=" * 70)
    
    # Ordenar inst√¢ncias por ID
    sorted_instances = sorted(instances.items(), key=lambda x: int(x[0]))
    
    if strategy == "round-robin":
        # Distribuir sequencialmente
        for i, html_file in enumerate(html_files):
            instance_id, instance_info = sorted_instances[i % len(sorted_instances)]
            dest_dir = Path(instance_info['data_dir']) / 'inputs'
            dest_dir.mkdir(parents=True, exist_ok=True)
            
            shutil.copy2(html_file, dest_dir)
            print(f"‚úì {html_file.name} ‚Üí Inst√¢ncia {instance_id}")
    
    elif strategy == "balanced":
        # Distribuir em lotes equilibrados
        files_per_instance = len(html_files) // len(sorted_instances)
        remainder = len(html_files) % len(sorted_instances)
        
        start_idx = 0
        for instance_id, instance_info in sorted_instances:
            # Distribuir lote + 1 arquivo extra para primeiras inst√¢ncias (se houver resto)
            count = files_per_instance + (1 if int(instance_id) <= remainder else 0)
            
            dest_dir = Path(instance_info['data_dir']) / 'inputs'
            dest_dir.mkdir(parents=True, exist_ok=True)
            
            batch = html_files[start_idx:start_idx + count]
            
            print(f"\nüìÅ Inst√¢ncia {instance_id} ({len(batch)} arquivos):")
            for html_file in batch:
                shutil.copy2(html_file, dest_dir)
                print(f"   ‚úì {html_file.name}")
            
            start_idx += count
    
    print("\n" + "=" * 70)
    print("‚úÖ Distribui√ß√£o conclu√≠da!")
    print("\nüìù Pr√≥ximos passos:")
    for instance_id, instance_info in sorted_instances:
        print(f"   {instance_id}. Acesse http://localhost:{instance_info['backend_port']}")

# ============================================================================
# 2. COLETAR RESULTADOS
# ============================================================================

from pathlib import Path
import shutil

def collect_results(output_dir: Path, instances: dict):
    """
    Coleta resultados de todas as inst√¢ncias para um diret√≥rio √∫nico.

    Args:
        output_dir: Diret√≥rio de destino
        instances: Dicion√°rio de inst√¢ncias
    """
    if not instances:
        print("‚ùå Nenhuma inst√¢ncia ativa")
        return

    output_dir.mkdir(parents=True, exist_ok=True)

    print(f"\nüì• Coletando resultados de {len(instances)} inst√¢ncia(s)")
    print(f"   Destino: {output_dir}")
    print("=" * 70)

    total_files = 0

    # Ordena√ß√£o robusta: tenta converter o id para int; se n√£o der, usa string
    def sort_key(item):
        k = str(item[0])
        return (0, int(k)) if k.isdigit() else (1, k)

    for instance_id, instance_info in sorted(instances.items(), key=sort_key):
        # Novo layout: <data_dir>/instance_<id>/outputs
        base_dir = Path(instance_info['data_dir'])
        source_dir = base_dir / f"instance_{instance_id}" / "outputs"

        # Fallback para layout antigo: <data_dir>/outputs
        if not source_dir.exists():
            legacy_dir = base_dir / "outputs"
            if legacy_dir.exists():
                source_dir = legacy_dir

        if not source_dir.exists():
            print(f"‚ö†Ô∏è  Inst√¢ncia {instance_id}: sem diret√≥rio de outputs (verificado: {source_dir})")
            continue

        json_files = list(source_dir.glob("*.json"))

        if not json_files:
            print(f"‚ÑπÔ∏è  Inst√¢ncia {instance_id}: sem resultados em {source_dir}")
            continue

        print(f"\nüìÅ Inst√¢ncia {instance_id} ({len(json_files)} arquivo(s)) de {source_dir}:")
        for json_file in json_files:
            # Renomeia para incluir a inst√¢ncia no nome final
            new_name = f"i{instance_id}_{json_file.name}"
            dest_file = output_dir / new_name

            shutil.copy2(json_file, dest_file)
            print(f"   ‚úì {json_file.name} ‚Üí {new_name}")
            total_files += 1

    print("\n" + "=" * 70)
    print(f"‚úÖ {total_files} arquivo(s) coletado(s) em: {output_dir}")


# ============================================================================
# 3. MONITORAR TODAS AS INST√ÇNCIAS
# ============================================================================

def monitor_all(instances: dict, follow: bool = False):
    """
    Mostra status consolidado de todas as inst√¢ncias.
    
    Args:
        instances: Dicion√°rio de inst√¢ncias
        follow: Se True, atualiza continuamente
    """
    import time
    import subprocess
    
    if not instances:
        print("‚ùå Nenhuma inst√¢ncia ativa")
        return
    
    def get_instance_stats(instance_info):
        """Coleta estat√≠sticas de uma inst√¢ncia."""
        try:
            # Buscar status via API
            import requests
            backend_port = instance_info['backend_port']
            
            response = requests.get(
                f"http://localhost:{backend_port}/health",
                timeout=2
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    'status': 'online',
                    'execucoes': data.get('execucoes_ativas', 0)
                }
            else:
                return {'status': 'error', 'execucoes': 0}
                
        except:
            return {'status': 'offline', 'execucoes': 0}
    
    def display_stats():
        """Exibe estat√≠sticas de todas as inst√¢ncias."""
        os.system('clear' if os.name != 'nt' else 'cls')
        
        print("üìä MONITOR DE INST√ÇNCIAS")
        print("=" * 80)
        print(f"{'ID':<4} {'Status':<10} {'Backend':<20} {'Redis':<15} {'Execu√ß√µes':<12}")
        print("-" * 80)
        
        for instance_id, instance_info in sorted(instances.items(), key=lambda x: int(x[0])):
            stats = get_instance_stats(instance_info)
            
            status_icon = {
                'online': 'üü¢',
                'offline': 'üî¥',
                'error': 'üü°'
            }.get(stats['status'], '‚ö™')
            
            backend_url = f"localhost:{instance_info['backend_port']}"
            redis_url = f"localhost:{instance_info['redis_port']}"
            
            print(f"{instance_id:<4} {status_icon} {stats['status']:<8} {backend_url:<20} {redis_url:<15} {stats['execucoes']:<12}")
        
        print("=" * 80)
        
        if follow:
            print("\nAtualizando a cada 5 segundos... (Ctrl+C para sair)")
    
    # Primeira exibi√ß√£o
    display_stats()
    
    # Se follow, atualizar continuamente
    if follow:
        try:
            while True:
                time.sleep(5)
                display_stats()
        except KeyboardInterrupt:
            print("\n\nüõë Monitoramento interrompido")

# ============================================================================
# 4. LIMPAR OUTPUTS
# ============================================================================

def clean_outputs(instances: dict, instance_id: str = None):
    """
    Limpa outputs de inst√¢ncias.
    
    Args:
        instances: Dicion√°rio de inst√¢ncias
        instance_id: ID espec√≠fico ou None para todas
    """
    if instance_id:
        if instance_id not in instances:
            print(f"‚ùå Inst√¢ncia {instance_id} n√£o encontrada")
            return
        
        to_clean = {instance_id: instances[instance_id]}
    else:
        to_clean = instances
    
    print(f"\nüßπ Limpando outputs de {len(to_clean)} inst√¢ncia(s)")
    
    for inst_id, inst_info in to_clean.items():
        outputs_dir = Path(inst_info['data_dir']) / 'outputs'
        
        if not outputs_dir.exists():
            continue
        
        files = list(outputs_dir.glob("*.json"))
        
        if files:
            print(f"\nüìÅ Inst√¢ncia {inst_id}:")
            for file in files:
                file.unlink()
                print(f"   üóëÔ∏è  {file.name}")
        else:
            print(f"‚ÑπÔ∏è  Inst√¢ncia {inst_id}: sem arquivos")
    
    print("\n‚úÖ Limpeza conclu√≠da!")

# ============================================================================
# CLI
# ============================================================================

def main():
    parser = argparse.ArgumentParser(
        description="Scripts auxiliares para inst√¢ncias paralelas"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos')
    
    # distribute
    dist_parser = subparsers.add_parser('distribute', help='Distribuir arquivos')
    dist_parser.add_argument('source', type=Path, help='Diret√≥rio com HTMLs')
    dist_parser.add_argument('--strategy', choices=['round-robin', 'balanced'],
                           default='balanced', help='Estrat√©gia de distribui√ß√£o')
    
    # collect
    collect_parser = subparsers.add_parser('collect', help='Coletar resultados')
    collect_parser.add_argument('--output', type=Path, default=Path('collected_results'),
                              help='Diret√≥rio de destino')
    
    # monitor
    monitor_parser = subparsers.add_parser('monitor', help='Monitorar inst√¢ncias')
    monitor_parser.add_argument('--follow', action='store_true',
                              help='Atualizar continuamente')
    
    # clean
    clean_parser = subparsers.add_parser('clean', help='Limpar outputs')
    clean_parser.add_argument('--instance', help='ID espec√≠fico')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    instances = load_instances()
    
    if args.command == 'distribute':
        distribute_files(args.source, instances, args.strategy)
    
    elif args.command == 'collect':
        collect_results(args.output, instances)
    
    elif args.command == 'monitor':
        monitor_all(instances, args.follow)
    
    elif args.command == 'clean':
        clean_outputs(instances, args.instance)

if __name__ == "__main__":
    main()